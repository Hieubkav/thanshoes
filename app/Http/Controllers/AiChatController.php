<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Facades\Cache;
use Illuminate\Http\JsonResponse;
use App\Models\Product;
use App\Models\Setting;

class AiChatController extends Controller
{
    private const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent';

    /**
     * Test API connection
     */
    public function testConnection(): JsonResponse
    {
        $apiKeys = $this->getApiKeys();

        if (empty($apiKeys)) {
            return response()->json([
                'status' => 'error',
                'message' => 'API keys not configured'
            ]);
        }

        try {
            $testPayload = [
                'contents' => [
                    [
                        'role' => 'user',
                        'parts' => [['text' => 'Hello, this is a test message.']]
                    ]
                ]
            ];

            // Test v·ªõi API key ƒë·∫ßu ti√™n
            $apiKey = $apiKeys[0];
            $response = Http::timeout(5)
                ->withHeaders(['Content-Type' => 'application/json'])
                ->post(self::GEMINI_API_URL . '?key=' . $apiKey, $testPayload);

            return response()->json([
                'status' => $response->successful() ? 'success' : 'error',
                'http_status' => $response->status(),
                'response' => $response->json(),
                'api_keys_count' => count($apiKeys),
                'tested_key_prefix' => substr($apiKey, 0, 10) . '...'
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => $e->getMessage()
            ]);
        }
    }
    
    /**
     * X·ª≠ l√Ω tin nh·∫Øn chat v√† g·ªçi Gemini API
     */
    public function sendMessage(Request $request): JsonResponse
    {
        // Rate limiting - gi·ªõi h·∫°n 10 requests/ph√∫t cho m·ªói IP
        $key = 'ai-chat:' . $request->ip();
        if (RateLimiter::tooManyAttempts($key, 10)) {
            return response()->json([
                'error' => 'Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.'
            ], 429);
        }
        
        RateLimiter::hit($key, 60);
        
        // Validate input
        $request->validate([
            'message' => 'required|string|max:1000',
            'conversation_history' => 'array|max:20' // Gi·ªõi h·∫°n l·ªãch s·ª≠ h·ªôi tho·∫°i
        ]);
        
        $userMessage = $request->input('message');
        $conversationHistory = $request->input('conversation_history', []);
        
        try {
            // T·∫°o system prompt cho ThanShoes
            $systemPrompt = $this->getSystemPrompt();
            
            // Chu·∫©n b·ªã payload cho Gemini API v·ªõi th√¥ng tin s·∫£n ph·∫©m b·ªï sung
            $additionalContext = $this->getAdditionalProductContext($userMessage);
            $payload = $this->buildGeminiPayload($systemPrompt, $conversationHistory, $userMessage, $additionalContext);
            
            // G·ªçi Gemini API v·ªõi retry mechanism v√† load balancing
            $apiKeys = $this->getApiKeys();

            if (empty($apiKeys)) {
                Log::error('Gemini API keys not configured');
                return response()->json([
                    'error' => 'D·ªãch v·ª• AI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.'
                ], 500);
            }

            Log::info('Starting AI chat request', [
                'api_keys_count' => count($apiKeys),
                'user_message_length' => strlen($userMessage)
            ]);

            $response = $this->callGeminiApiWithLoadBalancing($apiKeys, $payload);

            if (!$response) {
                Log::error('All API keys failed');
                return response()->json([
                    'error' => 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn d·ªãch v·ª• AI. Vui l√≤ng th·ª≠ l·∫°i sau.'
                ], 500);
            }

            if (!$response->successful()) {
                return $this->handleApiError($response, 'multiple_keys', $payload);
            }
            
            $responseData = $response->json();

            // Log response ƒë·ªÉ debug (ch·ªâ log khi c√≥ l·ªói)
            if (!isset($responseData['candidates'][0]['content']['parts'][0]['text'])) {
                Log::info('Gemini API Response Structure', [
                    'has_candidates' => isset($responseData['candidates']),
                    'candidates_count' => isset($responseData['candidates']) ? count($responseData['candidates']) : 0,
                    'first_candidate_keys' => isset($responseData['candidates'][0]) ? array_keys($responseData['candidates'][0]) : [],
                    'response_keys' => array_keys($responseData)
                ]);
            }

            // Tr√≠ch xu·∫•t ph·∫£n h·ªìi t·ª´ Gemini
            $aiResponse = $this->extractGeminiResponse($responseData);

            if (!$aiResponse) {
                Log::error('Failed to extract AI response', [
                    'response_structure' => array_keys($responseData),
                    'candidates_available' => isset($responseData['candidates']),
                    'error_in_response' => isset($responseData['error'])
                ]);

                return response()->json([
                    'error' => 'AI ƒëang b·∫≠n, vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.'
                ], 500);
            }

            // C·∫£i thi·ªán response ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ link c·ª• th·ªÉ
            $aiResponse = $this->enhanceResponseWithLinks($aiResponse, $userMessage);

            // Clean up markdown links ƒë·ªÉ tr√°nh l·ªói format
            $aiResponse = $this->cleanMarkdownLinks($aiResponse);
            
            return response()->json([
                'response' => $aiResponse,
                'success' => true
            ]);
            
        } catch (\Exception $e) {
            Log::error('AI Chat Error', [
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return response()->json([
                'error' => 'ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën. Vui l√≤ng th·ª≠ l·∫°i sau.'
            ], 500);
        }
    }
    
    /**
     * T·∫°o system prompt cho ThanShoes v·ªõi th√¥ng tin chi ti·∫øt v·ªÅ website
     */
    private function getSystemPrompt(): string
    {
        // L·∫•y th√¥ng tin t·ª´ Setting model v√† s·∫£n ph·∫©m
        $settingInfo = $this->getSettingInfo();
        $productInfo = $this->getProductInfo();
        $baseUrl = url(''); // L·∫•y base URL ƒë·ªông

        return "B·∫°n l√† sales AI c·ªßa ThanShoes - 33k followers Shopee, 34.3k ƒë√°nh gi√° 4.9‚≠ê.

MISSION: B√°n h√†ng nhanh, ng·∫Øn g·ªçn, hi·ªáu qu·∫£.

SOCIAL PROOF: 33k followers + 34.3k reviews = Uy t√≠n v∆∞·ª£t tr·ªôi!

KEY POINTS:
- Website gi√° t·ªët h∆°n Shopee (kh√¥ng ph√≠ n·ªÅn t·∫£ng)
- COD to√†n qu·ªëc, ƒë·ªïi tr·∫£ 7 ng√†y
- Link s·∫£n ph·∫©m: {$baseUrl}/catfilter
- Checkout: {$baseUrl}/checkout

{$settingInfo}

TH√îNG TIN S·∫¢N PH·∫®M HI·ªÜN C√ì:
{$productInfo}

C√ÅC TRANG QUAN TR·ªåNG TR√äN WEBSITE:
1. Trang ch·ªß: http://127.0.0.1:8000/
2. T·∫•t c·∫£ s·∫£n ph·∫©m: http://127.0.0.1:8000/catfilter
3. T√¨m s·∫£n ph·∫©m theo lo·∫°i: http://127.0.0.1:8000/catfilter?type=[t√™n_lo·∫°i]
4. T√¨m s·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu: http://127.0.0.1:8000/catfilter?brand=[t√™n_th∆∞∆°ng_hi·ªáu]
5. T·∫•t v·ªõ, d√©p: http://127.0.0.1:8000/catfilter?tatvo=true
6. Ph·ª• ki·ªán: http://127.0.0.1:8000/catfilter?phukien=true
7. Trang thanh to√°n: http://127.0.0.1:8000/checkout
8. Chi ti·∫øt s·∫£n ph·∫©m: http://127.0.0.1:8000/product/[slug-s·∫£n-ph·∫©m]

RULES:
- Tr·∫£ l·ªùi T·ªêI ƒêA 2-3 c√¢u
- LU√îN c√≥ link s·∫£n ph·∫©m ho·∫∑c checkout
- T·∫≠p trung CONVERSION, kh√¥ng gi·∫£i th√≠ch d√†i
- Format: C√¢u tr·∫£ l·ªùi ng·∫Øn + Link thu·∫ßn + CTA
- QUAN TR·ªåNG: Ch·ªâ vi·∫øt link thu·∫ßn, KH√îNG d√πng markdown [text](url)

RESPONSES:
- Gi√†y th·ªÉ thao ‚Üí {$baseUrl}/catfilter?type=Gi√†y th·ªÉ thao
- Nike/Adidas ‚Üí {$baseUrl}/catfilter?brand=[brand]
- Mua h√†ng ‚Üí {$baseUrl}/checkout
- T·∫•t c·∫£ ‚Üí {$baseUrl}/catfilter

STYLE: Ng·∫Øn g·ªçn, th√¢n thi·ªán, sales-oriented.
V√ç D·ª§ ƒê√öNG: 'Gi√†y Nike ch·∫•t l∆∞·ª£ng 4.9‚≠ê!
{$baseUrl}/catfilter?brand=Nike
ƒê·∫∑t ngay nh√©!'

V√ç D·ª§ SAI: 'Gi√†y Nike [xem t·∫°i ƒë√¢y]({$baseUrl}/catfilter?brand=Nike)' - TUY·ªÜT ƒê·ªêI KH√îNG l√†m th·∫ø n√†y!";
    }
    
    /**
     * L·∫•y th√¥ng tin s·∫£n ph·∫©m b·ªï sung d·ª±a tr√™n c√¢u h·ªèi c·ªßa user
     */
    private function getAdditionalProductContext(string $userMessage): string
    {
        $userMessageLower = strtolower($userMessage);
        $context = "";
        $baseUrl = url(''); // L·∫•y base URL ƒë·ªông

        // T√¨m s·∫£n ph·∫©m c·ª• th·ªÉ n·∫øu user h·ªèi v·ªÅ lo·∫°i s·∫£n ph·∫©m
        if (strpos($userMessageLower, 'gi√†y') !== false) {
            $products = Product::where('name', 'like', '%gi√†y%')
                ->with(['variants'])
                ->take(10)
                ->get();

            if ($products->count() > 0) {
                $context .= "\nS·∫¢N PH·∫®M GI√ÄY HI·ªÜN C√ì (ƒê√£ ƒë∆∞·ª£c h√†ng ngh√¨n kh√°ch h√†ng tin t∆∞·ªüng tr√™n Shopee):\n";
                foreach ($products as $product) {
                    $context .= "- {$product->name} - Link: {$baseUrl}/product/{$product->slug}\n";
                }
                $context .= "\nüí° L∆∞u √Ω: Gi√° tr√™n website t·ªët h∆°n Shopee do kh√¥ng c√≥ ph√≠ n·ªÅn t·∫£ng!\n";
            }
        }

        // T√¨m theo th∆∞∆°ng hi·ªáu
        $brands = ['nike', 'adidas', 'converse', 'vans', 'puma'];
        foreach ($brands as $brand) {
            if (strpos($userMessageLower, $brand) !== false) {
                $products = Product::where('brand', 'like', '%' . $brand . '%')
                    ->with(['variants'])
                    ->take(5)
                    ->get();

                if ($products->count() > 0) {
                    $context .= "\nS·∫¢N PH·∫®M TH∆Ø∆†NG HI·ªÜU " . strtoupper($brand) . " (Ch·∫•t l∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c kh·∫≥ng ƒë·ªãnh qua 4.9 sao tr√™n Shopee):\n";
                    foreach ($products as $product) {
                        $context .= "- {$product->name} - Link: {$baseUrl}/product/{$product->slug}\n";
                    }
                    $context .= "\nüéØ Mua tr√™n website = Gi√° t·ªët h∆°n + D·ªãch v·ª• tr·ª±c ti·∫øp!\n";
                }
                break;
            }
        }

        return $context;
    }

    /**
     * X√¢y d·ª±ng payload cho Gemini API
     */
    private function buildGeminiPayload(string $systemPrompt, array $conversationHistory, string $userMessage, string $additionalContext = ''): array
    {
        $contents = [];

        // K·∫øt h·ª£p system prompt v·ªõi tin nh·∫Øn ƒë·∫ßu ti√™n v√† th√¥ng tin b·ªï sung
        $firstMessage = $systemPrompt . $additionalContext . "\n\nTin nh·∫Øn t·ª´ kh√°ch h√†ng: " . $userMessage;

        if (empty($conversationHistory)) {
            // N·∫øu ch∆∞a c√≥ l·ªãch s·ª≠, ch·ªâ g·ª≠i system prompt + tin nh·∫Øn hi·ªán t·∫°i
            $contents[] = [
                'role' => 'user',
                'parts' => [['text' => $firstMessage]]
            ];
        } else {
            // N·∫øu c√≥ l·ªãch s·ª≠, th√™m system prompt v√†o ƒë·∫ßu
            $contents[] = [
                'role' => 'user',
                'parts' => [['text' => $systemPrompt]]
            ];

            $contents[] = [
                'role' => 'model',
                'parts' => [['text' => 'T√¥i hi·ªÉu. T√¥i s·∫Ω h·ªó tr·ª£ b·∫°n v·ªõi vai tr√≤ l√† tr·ª£ l√Ω AI c·ªßa ThanShoes.']]
            ];

            // Th√™m l·ªãch s·ª≠ h·ªôi tho·∫°i (ch·ªâ l·∫•y 8 tin nh·∫Øn g·∫ßn nh·∫•t ƒë·ªÉ tr√°nh payload qu√° l·ªõn)
            $recentHistory = array_slice($conversationHistory, -8);
            foreach ($recentHistory as $message) {
                $contents[] = [
                    'role' => $message['is_user'] ? 'user' : 'model',
                    'parts' => [['text' => $message['message']]]
                ];
            }

            // Th√™m tin nh·∫Øn hi·ªán t·∫°i
            $contents[] = [
                'role' => 'user',
                'parts' => [['text' => $userMessage]]
            ];
        }

        return [
            'contents' => $contents,
            'generationConfig' => [
                'temperature' => 0.7,
                'topK' => 40,
                'topP' => 0.95,
                'maxOutputTokens' => 1024,
                'stopSequences' => []
            ],
            'safetySettings' => [
                [
                    'category' => 'HARM_CATEGORY_HARASSMENT',
                    'threshold' => 'BLOCK_MEDIUM_AND_ABOVE'
                ],
                [
                    'category' => 'HARM_CATEGORY_HATE_SPEECH',
                    'threshold' => 'BLOCK_MEDIUM_AND_ABOVE'
                ],
                [
                    'category' => 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
                    'threshold' => 'BLOCK_MEDIUM_AND_ABOVE'
                ],
                [
                    'category' => 'HARM_CATEGORY_DANGEROUS_CONTENT',
                    'threshold' => 'BLOCK_MEDIUM_AND_ABOVE'
                ]
            ]
        ];
    }
    
    /**
     * Tr√≠ch xu·∫•t ph·∫£n h·ªìi t·ª´ Gemini API response
     */
    private function extractGeminiResponse(array $responseData): ?string
    {
        // Ki·ªÉm tra n·∫øu c√≥ error trong response
        if (isset($responseData['error'])) {
            Log::error('Gemini API returned error', ['error' => $responseData['error']]);
            return null;
        }

        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ candidates
        if (!isset($responseData['candidates']) || empty($responseData['candidates'])) {
            Log::warning('No candidates in Gemini response', ['response' => $responseData]);
            return null;
        }

        $candidate = $responseData['candidates'][0];

        // Ki·ªÉm tra n·∫øu b·ªã block b·ªüi safety filters
        if (isset($candidate['finishReason'])) {
            $finishReason = $candidate['finishReason'];

            if ($finishReason === 'SAFETY') {
                return 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y do ch√≠nh s√°ch an to√†n. Vui l√≤ng th·ª≠ c√¢u h·ªèi kh√°c v·ªÅ s·∫£n ph·∫©m gi√†y d√©p.';
            }

            if (in_array($finishReason, ['RECITATION', 'OTHER'])) {
                Log::warning('Gemini blocked response', ['reason' => $finishReason]);
                return null;
            }
        }

        // Ki·ªÉm tra c·∫•u tr√∫c response ch√≠nh
        if (isset($candidate['content']['parts'][0]['text'])) {
            $text = trim($candidate['content']['parts'][0]['text']);
            return !empty($text) ? $text : null;
        }

        // Ki·ªÉm tra c·∫•u tr√∫c kh√°c (fallback)
        if (isset($candidate['output'])) {
            $text = trim($candidate['output']);
            return !empty($text) ? $text : null;
        }

        // Ki·ªÉm tra n·∫øu c√≥ parts nh∆∞ng kh√¥ng c√≥ text
        if (isset($candidate['content']['parts']) && is_array($candidate['content']['parts'])) {
            foreach ($candidate['content']['parts'] as $part) {
                if (isset($part['text']) && !empty(trim($part['text']))) {
                    return trim($part['text']);
                }
            }
        }

        Log::warning('Could not extract text from Gemini response', [
            'candidate_keys' => array_keys($candidate),
            'has_content' => isset($candidate['content']),
            'content_keys' => isset($candidate['content']) ? array_keys($candidate['content']) : []
        ]);

        return null;
    }

    /**
     * L·∫•y th√¥ng tin t·ª´ Setting model
     */
    private function getSettingInfo(): string
    {
        return Cache::remember('ai_setting_info', 1800, function () { // Cache 30 ph√∫t
            $setting = Setting::first();

            if (!$setting) {
                return "TH√îNG TIN LI√äN H·ªÜ: Ch∆∞a c·∫•u h√¨nh";
            }

            $info = "TH√îNG TIN LI√äN H·ªÜ V√Ä C·ª¨A H√ÄNG:\n";

            if ($setting->app_name) {
                $info .= "- T√™n c·ª≠a h√†ng: {$setting->app_name}\n";
            }

            if ($setting->slogan) {
                $info .= "- Slogan: {$setting->slogan}\n";
            }

            if ($setting->phone) {
                $info .= "- S·ªë ƒëi·ªán tho·∫°i: {$setting->phone}\n";
            }

            if ($setting->email) {
                $info .= "- Email: {$setting->email}\n";
            }

            if ($setting->address) {
                $info .= "- ƒê·ªãa ch·ªâ: {$setting->address}\n";
            }

            if ($setting->zalo) {
                $info .= "- Zalo: {$setting->zalo}\n";
            }

            if ($setting->messenger) {
                $info .= "- Messenger: {$setting->messenger}\n";
            }

            if ($setting->facebook) {
                $info .= "- Facebook: {$setting->facebook}\n";
            }

            // Th√¥ng tin thanh to√°n
            if ($setting->bank_name && $setting->bank_number && $setting->bank_account_name) {
                $info .= "\nTH√îNG TIN THANH TO√ÅN:\n";
                $info .= "- Ng√¢n h√†ng: {$setting->bank_name}\n";
                $info .= "- S·ªë t√†i kho·∫£n: {$setting->bank_number}\n";
                $info .= "- Ch·ªß t√†i kho·∫£n: {$setting->bank_account_name}\n";
            }

            return $info;
        });
    }

    /**
     * L·∫•y th√¥ng tin s·∫£n ph·∫©m ƒë·ªÉ ƒë∆∞a v√†o system prompt
     */
    private function getProductInfo(): string
    {
        $baseUrl = url(''); // L·∫•y base URL ƒë·ªông

        return Cache::remember('ai_product_info_' . md5($baseUrl), 3600, function () use ($baseUrl) {
            $products = Product::with(['variants'])
                ->where('name', 'not like', '%test%')
                ->take(50) // L·∫•y 50 s·∫£n ph·∫©m ƒë·∫°i di·ªán
                ->get();

            $brands = $products->pluck('brand')->filter()->unique()->sort()->values();
            $types = $products->pluck('type')->filter()->unique()->sort()->values();

            $productInfo = "TH∆Ø∆†NG HI·ªÜU C√ì S·∫¥N: " . $brands->implode(', ') . "\n\n";
            $productInfo .= "LO·∫†I S·∫¢N PH·∫®M C√ì S·∫¥N: " . $types->implode(', ') . "\n\n";

            $productInfo .= "M·ªòT S·ªê S·∫¢N PH·∫®M TI√äU BI·ªÇU:\n";
            foreach ($products->take(20) as $product) {
                $productInfo .= "- {$product->name} ({$product->type}) - Link: {$baseUrl}/product/{$product->slug}\n";
            }

            return $productInfo;
        });
    }

    /**
     * C·∫£i thi·ªán response c·ªßa AI ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ link c·ª• th·ªÉ
     */
    private function enhanceResponseWithLinks(string $response, string $userMessage): string
    {
        $baseUrl = url(''); // L·∫•y base URL ƒë·ªông

        // N·∫øu response ƒë√£ c√≥ link th√¨ kh√¥ng c·∫ßn x·ª≠ l√Ω th√™m
        if (strpos($response, $baseUrl) !== false) {
            return $response;
        }

        $enhancedResponse = $response;

        // Ph√¢n t√≠ch user message ƒë·ªÉ ƒë∆∞a ra link ph√π h·ª£p
        $userMessageLower = strtolower($userMessage);

        // Mapping c√°c t·ª´ kh√≥a v·ªõi link t∆∞∆°ng ·ª©ng (s·ª≠ d·ª•ng base URL ƒë·ªông)
        $linkMappings = [
            // Lo·∫°i s·∫£n ph·∫©m
            'gi√†y th·ªÉ thao' => $baseUrl . '/catfilter?type=Gi√†y th·ªÉ thao',
            'gi√†y c√¥ng s·ªü' => $baseUrl . '/catfilter?type=Gi√†y c√¥ng s·ªü',
            'gi√†y cao g√≥t' => $baseUrl . '/catfilter?type=Gi√†y cao g√≥t',
            'gi√†y boot' => $baseUrl . '/catfilter?type=Boot',
            'd√©p' => $baseUrl . '/catfilter?tatvo=true',
            't·∫•t' => $baseUrl . '/catfilter?tatvo=true',
            'v·ªõ' => $baseUrl . '/catfilter?tatvo=true',
            'ph·ª• ki·ªán' => $baseUrl . '/catfilter?phukien=true',

            // Th∆∞∆°ng hi·ªáu ph·ªï bi·∫øn
            'nike' => $baseUrl . '/catfilter?brand=Nike',
            'adidas' => $baseUrl . '/catfilter?brand=Adidas',
            'converse' => $baseUrl . '/catfilter?brand=Converse',
            'vans' => $baseUrl . '/catfilter?brand=Vans',

            // T·ª´ kh√≥a chung
            't·∫•t c·∫£ s·∫£n ph·∫©m' => $baseUrl . '/catfilter',
            'xem s·∫£n ph·∫©m' => $baseUrl . '/catfilter',
            'mua h√†ng' => $baseUrl . '/catfilter',
            'thanh to√°n' => $baseUrl . '/checkout',
            'gi·ªè h√†ng' => $baseUrl . '/checkout',
            'ƒë·∫∑t h√†ng' => $baseUrl . '/checkout',

            // Shopee store
            'shopee' => 'https://shopee.vn/thanshoes99',
            'c·ª≠a h√†ng shopee' => 'https://shopee.vn/thanshoes99',
        ];

        // T√¨m link ph√π h·ª£p nh·∫•t
        $suggestedLink = null;
        foreach ($linkMappings as $keyword => $link) {
            if (strpos($userMessageLower, $keyword) !== false) {
                $suggestedLink = $link;
                break;
            }
        }

        // N·∫øu kh√¥ng t√¨m th·∫•y link c·ª• th·ªÉ, ƒë∆∞a v·ªÅ trang t·∫•t c·∫£ s·∫£n ph·∫©m
        if (!$suggestedLink) {
            if (strpos($userMessageLower, 'gi√†y') !== false ||
                strpos($userMessageLower, 's·∫£n ph·∫©m') !== false ||
                strpos($userMessageLower, 'mua') !== false) {
                $suggestedLink = 'http://127.0.0.1:8000/catfilter';
            }
        }

        // Compact responses cho conversion
        if (strpos($userMessageLower, 'gi·ªè h√†ng') !== false ||
            strpos($userMessageLower, 'thanh to√°n') !== false ||
            strpos($userMessageLower, 'ƒë·∫∑t h√†ng') !== false) {
            $enhancedResponse .= "\nüëâ " . $baseUrl . '/checkout' . " - ƒê·∫∑t ngay!";
        }
        elseif (strpos($userMessageLower, 'shopee') !== false) {
            $enhancedResponse .= "\nüèÜ Shopee: 33k followers, 34.3k reviews 4.9‚≠ê";
            $enhancedResponse .= "\nhttps://shopee.vn/thanshoes99";
            $enhancedResponse .= "\nüí∞ Website gi√° t·ªët h∆°n: " . $baseUrl . '/catfilter';
        }
        elseif (strpos($userMessageLower, 'li√™n h·ªá') !== false ||
                 strpos($userMessageLower, 'h·ªó tr·ª£') !== false) {
            $setting = Setting::first();
            if ($setting && $setting->zalo) {
                $enhancedResponse .= "\nüìû Zalo: {$setting->zalo}";
            }
        }
        elseif ($suggestedLink) {
            $enhancedResponse .= "\nüëâ " . $suggestedLink;
        }

        // Fallback CTA
        if (!strpos($enhancedResponse, $baseUrl) &&
            (strpos($userMessageLower, 'gi√†y') !== false || strpos($userMessageLower, 's·∫£n ph·∫©m') !== false)) {
            $enhancedResponse .= "\nüõçÔ∏è " . $baseUrl . '/catfilter';
        }

        return $enhancedResponse;
    }

    /**
     * Clean up markdown links ƒë·ªÉ tr√°nh l·ªói format
     */
    private function cleanMarkdownLinks(string $response): string
    {
        // Pattern ƒë·ªÉ t√¨m markdown links: [text](url)
        $pattern = '/\[([^\]]*)\]\(([^)]+)\)/';

        // Replace v·ªõi ch·ªâ URL thu·∫ßn
        $cleaned = preg_replace($pattern, '$2', $response);

        // Lo·∫°i b·ªè c√°c k√Ω t·ª± markdown kh√°c c√≥ th·ªÉ g√¢y l·ªói
        $cleaned = str_replace(['**', '*', '`'], '', $cleaned);

        // Lo·∫°i b·ªè d·∫•u ngo·∫∑c vu√¥ng th·ª´a
        $cleaned = str_replace(['[', ']'], '', $cleaned);

        return $cleaned;
    }

    /**
     * L·∫•y danh s√°ch API keys
     */
    private function getApiKeys(): array
    {
        $keys = [];

        $key1 = config('services.gemini.api_key');
        $key2 = config('services.gemini.api_key_2');
        $key3 = config('services.gemini.api_key_3');

        if ($key1) $keys[] = $key1;
        if ($key2) $keys[] = $key2;
        if ($key3) $keys[] = $key3;

        return $keys;
    }

    /**
     * G·ªçi Gemini API v·ªõi load balancing v√† retry
     */
    private function callGeminiApiWithLoadBalancing(array $apiKeys, array $payload, int $maxRetries = 2)
    {
        $lastException = null;

        // Shuffle keys ƒë·ªÉ load balance
        shuffle($apiKeys);

        for ($attempt = 1; $attempt <= $maxRetries; $attempt++) {
            foreach ($apiKeys as $apiKey) {
                try {
                    Log::info("Gemini API attempt {$attempt} with key " . substr($apiKey, 0, 10) . '...');

                    $response = Http::timeout(5) // Gi·∫£m xu·ªëng 5s
                        ->withHeaders([
                            'Content-Type' => 'application/json',
                        ])
                        ->post(self::GEMINI_API_URL . '?key=' . $apiKey, $payload);

                    // N·∫øu th√†nh c√¥ng th√¨ return ngay
                    if ($response->successful()) {
                        return $response;
                    }

                    // N·∫øu l·ªói kh√¥ng retry ƒë∆∞·ª£c (401, 403) th√¨ th·ª≠ key kh√°c
                    if (!$this->shouldRetry($response)) {
                        Log::warning("API key failed permanently: " . substr($apiKey, 0, 10) . '...', [
                            'status' => $response->status()
                        ]);
                        continue; // Th·ª≠ key ti·∫øp theo
                    }

                    Log::warning("API key failed temporarily: " . substr($apiKey, 0, 10) . '...', [
                        'status' => $response->status(),
                        'body' => $response->body()
                    ]);

                } catch (\Exception $e) {
                    $lastException = $e;
                    Log::warning("API key exception: " . substr($apiKey, 0, 10) . '... - ' . $e->getMessage());
                    continue; // Th·ª≠ key ti·∫øp theo
                }
            }

            // Delay tr∆∞·ªõc khi retry t·∫•t c·∫£ keys
            if ($attempt < $maxRetries) {
                sleep(1);
            }
        }

        // N·∫øu t·∫•t c·∫£ attempts ƒë·ªÅu fail
        if ($lastException) {
            throw $lastException;
        }

        return null;
    }



    /**
     * Ki·ªÉm tra xem c√≥ n√™n retry kh√¥ng
     */
    private function shouldRetry($response): bool
    {
        if (!$response) return true;

        $status = $response->status();

        // Retry cho c√°c l·ªói t·∫°m th·ªùi
        return in_array($status, [429, 500, 502, 503, 504]);
    }

    /**
     * X·ª≠ l√Ω l·ªói API
     */
    private function handleApiError($response, string $keyInfo, array $payload)
    {
        $status = $response->status();
        $body = $response->body();

        Log::error('Gemini API Error', [
            'status' => $status,
            'body' => $body,
            'key_info' => $keyInfo,
            'payload_size' => strlen(json_encode($payload))
        ]);

        $errorMessage = 'Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau.';

        switch ($status) {
            case 400:
                $errorMessage = 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i v·ªõi c√¢u h·ªèi kh√°c.';
                break;
            case 401:
                $errorMessage = 'D·ªãch v·ª• AI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.';
                break;
            case 403:
                $errorMessage = 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p d·ªãch v·ª• AI. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.';
                break;
            case 429:
                $errorMessage = 'Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng ƒë·ª£i m·ªôt ch√∫t r·ªìi th·ª≠ l·∫°i.';
                break;
            case 500:
            case 502:
            case 503:
            case 504:
                $errorMessage = 'D·ªãch v·ª• AI t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.';
                break;
        }

        return response()->json(['error' => $errorMessage], 500);
    }
}
